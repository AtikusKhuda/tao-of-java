<section id="starting-git"><title>Getting Started with Git</title>

<section id="scm-and-git"><title>SCM's and Git</title>
<para>
In large projects, there are lots of files, people, and updates. Source code management (SCM) systems, or version control systems, were created to tame the chaos that usually ensues. CVS, Subversion and Git are some examples of widely used version control systems. For this course, we’ve opted to choose Git because it’s very versatile and one of the most popular tools software developers use. Git is also relatively easy to use.
</para>

<para>
In Git, there is a main repository where all of the official files for a project are stored, similar to a headquarters. One person controls the main repository, unless they specify collaborators. In this case, a group of people control the main repository and have the power to change it directly. That means that when they make changes, they can “push” it back to the main repository without needing to ask for permission from the project’s owners/official contributors.
</para>

<para>
Everyone working in the project can “clone” the latest copy of files from the main repository to work with, creating their own local repository. A person can open a file, edit it, and then “add” it to the staging area which holds all of the changes that person makes. Once a person made all of the changes that they wanted, they can “commit” it to their local repository. From there, if they are satisfied, they can “push” the latest version of their local repository to the main repository for everyone else in the project to see.  So, all of the changes made to the local repository are pushed back into the main repository where a new version of all of the files get created, with information about what changes were made, and who they were made by. Of course, if you are not the owner or an official contributor, then you must go through one more step to affect the main repository.
</para>

<para>
If someone other than the owner or official contributors of a project wants to add to the project, then they must “fork” the main repository. Forking gives them a copy repository of the main repository, and they can push all of the changes that they want to the copied repository. Should they want to affect the main project, however, they will need to send a “pull request,” It is up to the main repository’s owner whether or not to accept the changes that they made, which is also known as “merging the pull request” into the main repository.
</para>

<para>
There’s a few jargon words here you should definitely remember, because you’ll be using them a lot.

<itermizedlist>
        <listitem><emphasis>clone</emphasis>: get a certain repository from Git to you computer</listitem>
        <listitem><emphasis>commit</emphasis>: make changes in your cloned version, decide they’re good and save them</listitem>
        <listitem><emphasis>push</emphasis>: upload the changes you’ve committed to the master branch</listitem>
        <listitem><emphasis>pull</emphasis>: get the newest version of the repository (you want to do this every time before you start working on the project again,
        provided there are new commits/pushes)</listitem>
</itermizedlist>

</section> <!-- scm-and-git -->

<section id="make-account"><title>Making a GitHub Account</title>

<para>
Go to: <ulink url="https://github.com/">https://github.com/</ulink>
Sign up for an account on the right hand side. Pick a username, email, and password then click the green “Sign up for free” button. Now you have an account on GitHub! GitHub hosts git projects and gives you a chance to look at other people’s projects. You can collaborate with them or participate in challenges, or simply just put your own projects up on display.
</para>

</section> <!-- make-account -->

<section id="setup-account"><title>Setting Up a GitHub Account</title>

<para>
We are going to set up your name and email in git (accessible via terminal). You will only need to do this once, and we will have you do this in the upcoming lab.
</para>

<orderedlist>
<listitem>Open up your terminal.</listitem>
<listitem>Type in:
   <code>git config --global user.name YourName</code>.
This will set up the name that will appear every time you commit.</listitem>
<listitem>Next, setup your email (use the same one you used to sign up):
   <code>git config --global user.email your_email@example.com</code>
This will link any commits and pushes that you make using git to your
github account. </listitem>
<listitem>When you commit changes to a repository, git will make you type
using the editor Vim. You can change it to emacs, for example. If you want to change the editor used, then type in this:
<code>git config --global core.editor editor</code></listitem>
</orderedlist>

</section> <!-- setup-account -->

<section id="make-repo"><title>Making Your Own Repository</title>


<para>
Now that you have an account and you have set up your name and username in git, let’s make a main repository on GitHub. There are two things that can only be done through GitHub: putting your project up on GitHub (making a repository on the website to house the project) and making a copy of someone else’s project (forking someone else’s repository).
</para>

<section id="make-setup-repo"><title>Making & Setting Up A Repository</title>

<para>
After logging into GitHub, there should be a green button labelled “new repository” in the lower right-hand side. Click it. Give your repository a name, a brief description, and then click “create repository.” You have now made a repository that others can see on github (if you made the repository public)! This repository is the main repository.
</para>

<para>
You now have a repository, lets clone it into your machine so that you can add files.
</para>

</section> <!-- make-setup-repo -->

<section id="clone-repo"><title>Cloning A Repository</title>

<para>
<emphasize>Quick note!
Typing git help into the terminal will bring up a list of the most common git commands and a brief description of what they do. When calling git commands, remember to precede them with git! For example:
   <code>git add</code>
is valid while just “add” would be invalid.</emphasize>
</para>

<orderedlist>
<listitem>Get the HTTP URI of the repository you just created on GitHub:
Just copy the URI given there, and make sure HTTP is shaded.</listitem>
<listitem>Type in: <code>git clone uri</code>. Example: <code>git clone https://github.com/tranchri/Tutorial.git</code></listitem>
</orderedlist>

<para>
Now you have a directory on your computer called Tutorial (in the case of the example). Inside the directory will be all of the files in the original repository that you cloned so that you can edit, add, and/or remove files the way you normally do. If you do not want the directory’s name to be the same as the repository that you are cloning, then type in a name for the directory after the URI:
</para>
<para>
    Example: <code>git clone https://github.com/tranchri/Tutorial.git GitStuff</code>
</para>

<para>
Now the directory will have the name GitStuff instead of Tutorial.
</para>

<para>
When you clone a repository, you can only contribute to it if you are the creator or have been declared as one of the contributors. Otherwise, the code is just there for you to play around with and not upload. 
</para>

</section> <!-- clone-repo -->
</section> <!-- make-repo -->

<section id="fork-clone-repo"><title>Forking and Cloning A Repository</title>

<para>
If you want to make changes to a repository that is not your own, you should “fork” the repository. When we fork a repository, we essentially make a copy repository that we have control over. We can ask the original creator to accept changes in our forked version via a “pull request,” and it’s up to their discretion whether or not to accept it. Therefore, the fork is a copy of the repository you want to work with/on, and is tracked by GitHub to prevent code stealing. It is not the actual repository that is owned by someone else. 
</para>

<section id="fork-repo"><title>Forking A Repository on GitHub</title>

<orderedlist>
<listitem>Find a project you would like to contribute to on GitHub.</listitem>
<listitem>Go to the repository that holds the project.</listitem>
<listitem>There is a button in the upper right-hand corner that says “fork,” click it.</listitem>
<listitem>GitHub will fork the repository for you.</listitem>
<listitem>Now, you have a copy repository that will show up as under your repositories on GitHub. Follow the steps in the section above and clone the forked repository into your machine so that you can work on it.</listitem>
</orderedlist>

<para>
If you intend to interact with the main repository, you will need to create
a remote for the main repository which will allow you to pull any updates
made to the main repository:
</para>
<para>
    <code>git remote add name uri</code>
</para>
<para>
You can name the remote whatever makes sense to you, but it is convention to call
it “upstream”. Grab the HTTP uri of the repository that you forked.
</para>
<para>
    Example:<code>git remote add upstream
https://github.com/lewismar/FakeName.git</code>
</para>
<para>
The username should be the owner’s and not yours.
</para>
<para>
Now the main repository will be referred to as main, and you can pull
updates from it to your local repository.
</para>

</section> <!-- fork-repo -->

<section id="adding-changes"><title>Adding Files and Making Changes</title>

<para>
Now that you have either created your own project or joined one, lets begin editing.
</para>
<para>
Notes:
</para>
<para>
To check if there are any changes/additions to your local repository, type
in: <code>git status</code>
</para>
<para>
This will tell you if any new files were made and added, if any of the files were modified, and/or if there were no changes made at all.
Typing in: <code>git diff</code>.
</para>
<para>
Will show you the section of the file that was changed (in your working
directory).
</para>

<section id="adding-files"><title>Adding Files</title>

<para>
To add files into the local repository they must first exist in your
working directory (the folder you made and initialized). Most repositories
have a README file that briefly explains what the project is, so lets make
one if you don’t already have one.
</para>
<para>
First, we need to create the README file: <code>touch README</code>
</para>
<para>
This will create a file named README without any text in it. If you want to
make the file and push text in it at the same time, create the file using a
text editor (either gedit or emacs) and type the description into the file
and save. If not, just use touch; you can go back later using gedit, emacs,
etc to put the explanation into README. <code>gedit README &</code> or
<code>emacs README &</code>.
</para>

</section> <!-- adding-files -->

<section id="editing-files"><title>Editing Files</title>

<para>
Editing files is like editing any file. Open the file using some type of editor (emacs, vim, gedit, etc) make your changes, and then save. 
</para>

</section> <!-- editing-files -->

<section id="adding-staging"><title>Adding/Staging Changes</title>

<para>
To add (also known as staging since it puts the file into the staging area):
    <code>git add file(s)</code>
</para>
<para>
Staging puts the files into the staging area, which holds all of the
changes made in the working directory that will be committed to the local
directory. This is important because only the files that you stage will be
the ones that go into the local directory when you commit changes, and only
the changes in the local directory will be added to the main repository
when you push. It is good practice to only “add” what is necessary, nothing
more (no temporary files, no executable files that can be generated,
etc). If you do, the repository will only get cluttered, and if you were
planning on sending a pull request, adding more than necessary will not be
in your favor.
</para>

</section> <!-- adding-staging -->

<section id="deleting-files"><title>Deleting Files</title>

<para>
This is extremely similar to removing files in terminal normally, just add a git in the front.
    <code>git rm file</code>
</para>
<para>
You do not need to stage a deletion, so no need to do git add.
</para>

</section> <!-- deleting-files -->

<section id="committing"><title>Committing</title>

<para>
If you finished making changes and you are ready to put them into the main repository, type in:
    <code>git commit</code>
</para>
<para>
to update your local repository with the changes/creations/deletions
made. Emacs will pop up (if you changed your editor, if not then Vim will
pop up). Type in a brief sentence about what changes you made so that your
colleagues will have a sense of what you did, save, and then close. You
have successfully committed changes to your local repository!
</para>
<para>
Note: To avoid having any text editor pop up, use the -m flag to enter a message directly in the terminal.
Example: <code>git commit -m ‘adding a readme file’</code>
</para>
<para>
Notice the single quotes that surround the message.
</para>

</section> <!-- committing -->

<section id="pushing"><title>Pushing</title>

<para>
Then, to send your latest local repository to the main repository, use:
    <code>git push repository branch</code>
</para>
<para>
Almost certainly, repository will be origin and branch will be master if this was a repository that you created. Origin is what we named the repository earlier in the tutorial under “Making Your Own Repository” and since we have not made any branches yet, the default branch is called master.
    <code>Example: git push origin master</code>
</para>
<para>
You will then be prompted to type in a username and password, when you type no text will show. Type in your github username and password.
</para>
</section> <!-- pushing -->

<section id="pull-requests"><title>Pull Requests</title>

<para>
This is only necessary if you forked a repository and want to send a request to have your changes be a part of the main code. When you forked a repository, there is one more level of repository that you need to be aware of. Normally, there is the local and main repository. Committing will change the local repository while pushing will change the main repository. When you fork a repository there is also a forked repository that goes inbetween the local and main repositories. Since you are not the project owner, you need to send a request to whoever does own the project to have your changes approved and added. This is why pull requests exist. So after you committed to your local repository, pushed to the forked repository, you need to send a pull request to the main repository.
</para>

<orderedlist>
<listitem>Get on github, go to your forked repository and then click “pull request” which is located near the middle on the top of the page.</listitem>
<listitem>Title it and write a brief description of what you did.</listitem>
<listitem>Click the green button at the end, “send pull request.”</listitem>
</orderedlist>

<para>
Then it is up to the owner of the main repository to merge your changes with the main code. 
</para>

</section> <!-- pull-requests -->

<section id="merging-requests"><title>Merging Pull Requests</title>

<para>
If you happen to be the owner of the main repository this is how you merge a pull request with the code and files in the main repository.
You should be notified on your front page of a pull request, click on the link, scroll down and click on the green button “merge pull request,” then click on the green button that shows up after.
</para>

</section> <!-- merging-requests -->

<section id="keeping-uptodate"><title>Keeping Your Local Repository up to
Date</title>
<para>
You are going to want the latest version of the main repository in your local repository, so to do this you will need to pull. If your repository was not empty to begin with, you would have had to pull from it before pushing.
Type in:
    <code>git pull</code>
to get any changes from the main repository. If none were made, it will
report back telling you that everything is up-to-date.
</para>

</section> <!-- keeping-uptodate -->
</section> <!-- fork-clone-repo -->

<section id="important-terms"><title>Important Terms</title>

<itemizedlist>
<listitem>Push/pull</listitem>
<listitem>Commit</listitem>
<listitem>Clone</listitem>
<listitem>Fork</listitem>
<listitem>Version Control</listitem>
<listitem>GitHub</listitem>
<listitem>Repository</listitem>
</itemizedlist>

</section><!-- important-terms -->

<section id="review-questions"><title>Review Questions</title>

<orderedlist>
<listitem>Why is git useful?</listitem>
<listitem>What is forking and when would you use it?</listitem>
<listitem>What is cloning and when would you use it?</listitem>
</orderedlist>
</section><!-- review-questions -->

<section id="sources"><title>Sources</title>
<itemizedlist>
<listitem><ulink url="http://www.cs.grinnell.edu/~rebelsky/Courses/CSC195/2013S/Outlines/outline.02.html">http://www.cs.grinnell.edu/~rebelsky/Courses/CSC195/2013S/Outlines/outline.02.html</ulink></listitem>
<listitem><ulink url=http://git-scm.com/book/en/Getting-Started-Git-Basics"">http://git-scm.com/book/en/Getting-Started-Git-Basics</ulink></listitem>
<listitem><ulink url="http://hoth.entp.com/output/git_for_designers.html">http://hoth.entp.com/output/git_for_designers.html</ulink></listitem>
</itemizedlist>
</section><!-- sources -->
