<section id="lab-git"><title>Getting Started with Git (in Eclipse)</title>

<para>
  <emphasis>Summary</emphasis>: In this laboratory, you will practice
  using Git.  Although you can use the command line (see commands
  below) to manage your GitHub repositories, we will try communicating
  with GitHub directly from Eclipse, using the EGit plugin.  After all,
  if we're using an IDE, we should integrate everything, including
  our source code management system.
</para>

<para>
  If you do though opt to go the command line route in the future,
  you can find <link linkend="anchor-git-commands">a list of useful
  commands</link> at the end of this lab.
</para>

<section id="git-0"> <title>Preparation</title>

<para>
  a. Make sure you have read <ulink url="../readings/git.html">the Introduction to Git reading</ulink>. 
</para>

<para>
  b. Make sure that you have done <ulink url="../labs/eclipse.html">the Introduction to Eclipse lab</ulink>
</para>

<para>
  c. Log in and open a terminal window.
</para>

<para>
  d. Start Eclipse.
</para>

</section> <!-- preparation -->

<section id="git-exercises"> <title>Exercises</title>

<section id="git-1"> <title>Exercise 1: Create a GitHub Account</title>

<para>
  Create a GitHub account at <ulink url="https://github.com/">https://github.com/</ulink>
</para>

</section> <!-- Exercise 1 -->

<section id="git-02"> <title>Exercise 2: Configure Your Linux Account</title>

<para>
  As you may recall, your life is easier if you do a bit of configuration
  before working with Git.  You'll find it useful to configure in both
  the terminal and Eclipse.  We'll start by working in the terminal.
</para>

<para>
  First, open a new terminal window.
</para>

<para>
  Next, type these commands.
</para>

<screen>
<prompt>$</prompt> <userinput>git config --global user.name "<emphasis>YourName</emphasis>"</userinput>
<prompt>$</prompt> <userinput>git config --global user.email <emphasis>username@grinnell.edu</emphasis></userinput></screen>

<para>
  Finally, set your editor.
</para>

<screen>
<prompt>$</prompt> <userinput>git config --global core.editor <emphasis>editor</emphasis></userinput></screen>

<para>
  You can use <code>emacs</code>, <code>vi</code> (or <code>vim</code>,
  or <code>vim.basic</code>), or even <code>gedit</code>.
</para>

</section> <!-- git-02 -->

<section id="git-03"><title>Exercise 3: Add EGit</title>

<para>
  EGit may not be installed on your workstation, so you get to configure
  Eclipse to use EGit.
</para>

<para>
  a. From the <guimenu>Help</guimenu> menu, select 
  <guimenuitem>Install New Software...</guimenuitem>.
</para>

<para>
  b. In the dialog box that pops up, click <guibutton>Add</guibutton>.
</para>

<para>
  c. In the next dialog box that pops up, use "EGit" as the name and
  <code><ulink url="http://download.eclipse.org/egit/updates"/></code> 
  as the location.  
</para>

<para>
  d.  You should then see <guilabel>Eclipse Git Team
  Provider</guilabel> and <guilabel>JGit</guilabel> in the middle pane.
  Select them both.
</para>

<para>
  e. Click the <guibutton>Next &gt;</guibutton> button.
</para>

<para>
  f. You'll probably get an error message and a longer list of items.
  Uncheck <guilabel>Task focused interface for Eclipse Git Team 
  Provider</guilabel> (thanks to StackOverflow for helping me figure this out).
</para>

<para>
  g. Click the <guibutton>Next &gt;</guibutton> button.
</para>

<para>
  h. Eclipse will ask you to review the items to be installed.
  Click the <guibutton>Next &gt;</guibutton> button.
</para>

<para>
  i. Review the user license.
</para>

<para>
  j. Click the <guibutton>Finish</guibutton> button.
</para>

<para>
  k. After the software installs, you will probably need to restart
  Eclipse.
</para>

</section> <!-- git-03 -->

<section id="git-04"> <title>Exercise 4: Create a Workspace</title>

<para>
  Create a folder on your computer where you will store your GitHub
  repositories.  For example, you might name it <code>CSC207</code>.
</para>

</section> <!-- git-04 -->

<section id="git-05"> <title>Exercise 5: Configuring Eclipse to Use Your New Directory</title>

<para>
  Go into Eclipse <guimenu>Window</guimenu> &gt; 
  <guimenuitem>Preferences</guimenuitem>. A preferences window should open.
  Click the triangle next to <guimenuitem>Team</guimenuitem>.  Then, 
  click on <guimenuitem>Git</guimenuitem>.  Change the default repository 
  to the one you just created and click <guibutton>Apply</guibutton>.
</para>

</section> <!-- git-05 -->

<section id="git-06"> <title>Exercise 6: Configuring Git</title>

<para>
  You should still be in the preferences window.  If not, reopen it.
  Then click the triangle next to <guimenuitem>Git</guimenuitem> to
  expand that item.  
  Click on <guimenuitem>Configurations</guimenuitem> and make sure that 
  under <guilabel>user</guilabel> it says something like the following.
</para>

<programlisting>
    email    youremail@grinnell.edu

    name     Your Name
</programlisting>

<para>
  If it doesn't you should add new entries for both those values.  Click
  on <guibutton>Add Entry</guibutton> and enter <quote>user.name</quote>
  as the <emphasis>Key</emphasis> and your username on GitHub
  as the <emphasis>Value</emphasis>. Click on <guibutton>Add
  Entry</guibutton> again and enter <quote>user.email</quote> as the
  <emphasis>Key</emphasis> and the email you used for GitHub as the
  <emphasis>Value</emphasis>.
</para> 

</section> <!-- git-06 -->

<section id="git-07"> <title>Exercise 7: Connecting Eclipse to GitHub</title>

<para>
  To help identify yourself, you will need a pair of RSA keys.
</para>

<para>
  Once again, open the Preferences window if it's not already open.
</para>

<para>
  a. In Eclipse, expand the <guimenuitem>General</guimenuitem>
  preference.  Then expand <guimenuitem>Network
  Connections</guimenuitem>. Select <guimenuitem>SSH2</guimenuitem>
  Click the <guimenuitem>Key Management Tab</guimenuitem> then
  <guibutton>Generate RSA Key</guibutton>. Copy the public key to
  your clipboard. Enter a passphrase.  Click <guibutton>Save
  Private Key</guibutton> to save your private key and click
  <guibutton>Apply</guibutton>. Exit the preferences.
</para>

<para>
  b. Now we have to tell GitHub about the key.  Log in to your
  account on the GitHub Web site.  Go to the your <guibutton>Account
  Settings</guibutton> (which may appear as a pair of tools).
  Under <guibutton>SSH Keys</guibutton> click <guibutton>Add SSH
  key</guibutton>. Give it a descriptive name (EGit), and paste the
  public key you just copied from Eclipse.
</para>

</section> <!-- git-07 -->

<section id="git-08"> <title>Exercise 8: Creating a New Repository</title>

<para>
  a. Log in to your GitHub account.
</para>

<para>
  b. Somewhere on the page (along the right hand column, at the time
  of this writing, but it changes), there should be a button labeled
  <guibutton>New Repository</guibutton> (although that name changes, too).
  Click that button.  A dialog should appear.
</para>

<para>
  c. Name your repository (e.g., <code>git-exercise</code>).  Click
  the buttons to make it public and to initialize the repository
  with a README file.  Choose the Java .gitignore file.  Choose
  a license you like.  Finally, click <code>Create Repository</code>.
</para>

<para>
  d. Copy the SSH link associated with your repository.  You will need
  to look for the Clone URL button (currently along the right-hand side
  of the page), click on <guibutton>SSH</guibutton>, and then click on
  <guibutton>Copy to Clipboard</guibutton>.
</para>

<para>
  The link should look something like the following:
</para>

<para>
<code>git@github.com:<emphasis>username</emphasis>/sample-java.git</code>
</para>

</section> <!-- git-08 -->

<section id="git-09"> <title>Exercise 9: Getting the Repository into Eclipse</title>

<para>
  <emphasis>Warning!  These steps are long, tedious, and exacting.</emphasis>
  However, they will become second nature after awhile.
</para>

<para>
  Switch back to Eclipse.
</para>

<itemizedlist>
  <listitem>
    Select <guimenu>File</guimenu> &gt; <guimenuitem>Import...</guimenuitem>.  
  </listitem>
  
  <listitem>
    Expand the <guimenuitem>Git</guimenuitem> item.
  </listitem>

  <listitem>
    Double-click on <guimenuitem>Projects from Git</guimenuitem>.
  </listitem>

  <listitem>
    Double-click on <guimenuitem>URI</guimenuitem>.
  </listitem>

  <listitem>
    Paste the URI you just copied from GitHub. 
  </listitem>
  
  <listitem>
    Confirm that the <emphasis>Host</emphasis> is
    <quote>GitHub.com</quote> and that the <emphasis>Repository
    path</emphasis> is something reasonable.
  </listitem>

  <listitem>
    Under <emphasis>Authentication</emphasis> set the <emphasis>User</emphasis>
    to <quote>git</quote>.
  </listitem>

  <listitem>
    Click the <guibutton>Next</guibutton> button.
  </listitem>

  <listitem>
    Make sure that <guilabel>master</guilabel> is checked.
  </listitem>
  
  <listitem>
    Click the <guibutton>Next</guibutton> button.
  </listitem>
  
  <listitem>
    Verify that the folder selected is the one you created a few
    exercises ago (perhaps with a subfolder added for this project).
  </listitem>

  <listitem>
    Leave the <emphasis>Initial branch</emphasis> as <quote>master</quote> 
    and the <emphasis>Remote name</emphasis> as <quote>origin</quote>. 
  </listitem>
  
  <listitem>
    Click the <guibutton>Next</guibutton> button. 
  </listitem>

  <listitem>
    We're now ready to turn the repository into a project.  Click the
    <guibutton>Use New Project Wizard</guibutton>.  Then click the
    <guibutton>Finish</guibutton> button.
  </listitem>

  <listitem>
    Click <guibutton>Java Project</guibutton> and then 
    the <guibutton>Next</guibutton> button.
  </listitem>

  <listitem>
    We'll need to use our Git directory as the location for the project.
    Untick <guilabel>Use default location</guilabel>.  Then click
    <guibutton>Browse</guibutton> and select your cloned repository.
  </listitem>

  <listitem>
    Enter a project name.  To avoid confusion, you may want to give it 
    the same name as your repository.  (Eclipse may have done this for
    you already.)
  </listitem>

  <listitem>
    Click <guibutton>Finish</guibutton>.
  </listitem>

  <listitem>
    Take a deep breath.  You've finished linking Eclipse to your Git
    repository.
  </listitem>
</itemizedlist>

<para>
  You an now add, delete, and modify files as you please.  The next
  challenge will be committing and pushing them back to the main
  repository.
</para>

</section> <!-- git-09 -->

<section id="git-10"> <title>Exercise 10: Getting Changes to Appear on GitHub</title>

<para>
  Making our repository an Eclipse project introduced some changes.  
  For example, there's now a hidden <code>.project</code> file and
  the <code>.gitignore</code> file has expanded a bit.  We should
  commit these changes to the repository. 
</para>

<para>
  Right click on your new project in the Package Explorer. 
  Select <guimenuitem>Team</guimenuitem> &gt; <guimenuitem>Commit</guimenuitem>.
  A window will appear.  We can select the modified and added files 
  (<code>.gitignore</code>, <code>.classpath</code>, and
  <code>.project</code>), enter a message (e.g., <quote>Add Eclipse
  project files</quote>) and click <guibutton>Commit</guibutton>.
</para>

<para>
  This commit remains local.  To get it to the main repository, we
  right click on the project and then select <guimenuitem>Team</guimenuitem>
  &gt; <guimenuitem>Push to Upstream</guimenuitem>.
</para>

<para>
  Why do this now?  So that we can distinguish these changes from our
  own.
</para>

</section> <!-- git-10 -->

<section id="git-11"><title>Exercise 11: Add Some Java</title>

<para>
  In <ulink url="../labs/eclipse.html">the Eclipse lab</ulink>, you created
  a simple <quote>Hello World</quote> Java program.  Create a similar
  program in your new repository.  That is,
</para>

<para>
  a. Create a new package, such as <code>edu.grinnell.csc207.<emphasis>username</emphasis>.hello</code>.
</para>

<para>
  b. Create a new class, such as <code>HelloWorld</code>.
</para>

<para>
  c. Add a <code>main</code> method to the class that has the following
  form.
</para>

<programlisting>
    public static void main(String[] args) {
        System.out.println("Hello, GitHub!");
    } // main(String[])
</programlisting>

<para>
  d. Run your program to make sure that it's correct.
</para>

<para>
  e. Save your program.
</para>

</section> <!-- git-11 -->

<section id="git-12"><title>Exercise 12: Commit and Push Your Code</title>

<para>
  We've updated the repository and so should commit the code to the
  repository.  We'll also push it back to the main repository.  But
  instead of the two-step process, try using the <guibutton>Commit and
  Push</guibutton> button. 
</para>

<para>
  Note that we usually don't push immediately immediately after each commit, 
  but it's handy to do so now.  Normally, we do a series of small commits
  and only push once we've reached a larger goal.
</para>

<para>
  Go to GitHub and see if the changes you have made are visible.  You may
  need to navigate a few layers deep, since Eclipse makes a directory for
  each portion of the package.
</para>

</section> <!-- git-12 -->

<section id="git-13"><title>Exercise 13: Making Updates on GitHub</title>

<para>
  Although we normally update code in our local copy of the repository,
  it is also possible to update code directly on GitHub.  Navigate to
  the Java code you just wrote and click the <guibutton>Edit</guibutton>
  button.
</para>

<para>
  Change the output.  Then scroll to the bottom of the page, enter a
  commit message, and click <guibutton>Commit</guibutton>.
</para>

</section> <!-- git-13 -->

<section id="git-14"><title>Exercise 14: Pulling Updates from GitHub</title>

<para>
  Our primary repository is now updated.  How about our local repository?
  Let's see.  Switch back to Eclipse.  Open the Java code you created and
  edited.  Has it changed?
</para>

<para>
  It is unlikely that the Java code changed.  Why?  Because you haven't
  told Eclipse to pull the updated version.  That's a two step process.
</para>

<para>
  First, right click on the project and select <guimenuitem>Team</guimenuitem>
  &gt; <guimenuitem>Fetch from Upstream</guimenuitem>.  Next,
  right click on the project and select <guimenuitem>Team</guimenuitem>
  &gt; <guimenuitem>Merge</guimenuitem>.  
  Cross your fingers that everything worked.
</para>

</section> <!-- git-14 -->

<section id="git-15"><title>Exercise 15: Conflicting Changes</title>

<para>
  On GitHub, update the Java file by adding another print statement.
</para>

<para>
  In Eclipse, update the Java file by changing the output.
</para>

<para>
  Determine what happens when you try to fetch and merge.
</para>

</section> <!-- git-15 -->

</section> <!-- git-exercises -->

<section id="git-extra"><title>For Those With Extra Time</title>

<section id="git-extra-01"><title>Extra 1: Other Local Modifications</title>

<para>
  Find out what Eclipse does if you modify one of the files in the
  Git repository using Emacs or an editor of your choice.
</para>

</section> <!-- git-extra-01 -->

<section id="git-extra-02"><title>Extra 2: Experimenting with Forks</title>

<para>
  You'll need to do this exercise with a partner.
</para>

<para>
  Create a fork of your partner's repository.
</para>

<para>
  Figure out how to copy your fork into Eclipse.
</para>

</section> <!-- git-extra-02 -->

<section id="git-extra-03"><title>Extra 3: Shared Repositories</title>

<para>
  You'll need to do this exercise with a partner.
</para>

<para>
  First, figure out how to give someone else administrative access to
  your repository.
</para>

<para>
  Next, verify that they have administrative access by having them
  make a change and upload it to the repository.
</para>

<para>
  Finally, figure out what happens if the two of you make changes.
</para>

</section> <!-- git-extra-03 -->

</section> <!-- git-extra -->

<anchor id="anchor-git-commands"/>
<section id="git-commands"><title>Some Useful Git Commands</title>

<programlisting>
git config --global user.name <emphasis>"Your Name"</emphasis>
git config --global user.email <emphasis>your_email@example.com</emphasis>
git config --global core.editor <emphasis>editor</emphasis>

git help
git clone
git add
git commit
git pull
git push
</programlisting>

</section> <!-- git-commands -->

</section> <!-- Git Lab -->
